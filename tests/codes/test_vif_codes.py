import pytest

from pymbus.codes.vif import (
    VIFCode,
    VIFCodeKind,
    VIFCodeTable,
    VIFCodeUnit,
)
from pymbus.exceptions import MBusValidationError
from pymbus.telegrams.fields import ValueInformationField as VIF


def _assert_vif_code(
    vif: VIF,
    coef: float,
    kind: VIFCodeKind,
    unit: VIFCodeUnit,
    *,
    extension_byte: None | int = None,
) -> None:
    __tracebackhide__ = True

    table = VIFCodeTable()

    answer = VIFCode(
        coef=coef,
        kind=kind,
        unit=unit,
    )

    assert table(vif, extension_byte=extension_byte) == answer
    assert table(0x80 | vif, extension_byte=extension_byte) == answer


def test_nonbyte_value_selection():
    with pytest.raises(MBusValidationError):
        VIFCodeTable()(266)


def test_vif_code_absence():
    assert VIFCodeTable()(VIF(0b0111_1011)) is None


def test_wrong_extension_bit_value():
    with pytest.raises(ValueError, match="wrong extension_byte"):
        VIFCodeTable()(VIF(0), extension_byte=-1)


@pytest.mark.parametrize(
    ("vif", "coef", "kind", "unit"),
    [
        # Energy (Watt * hour)  # noqa: ERA001
        (
            VIF(0b0000_0000),
            1e-3,
            VIFCodeKind.energy,
            VIFCodeUnit.watt_hour,
        ),
        (
            VIF(0b0000_0001),
            1e-2,
            VIFCodeKind.energy,
            VIFCodeUnit.watt_hour,
        ),
        (
            VIF(0b0000_0010),
            1e-1,
            VIFCodeKind.energy,
            VIFCodeUnit.watt_hour,
        ),
        (
            VIF(0b0000_0011),
            1e0,
            VIFCodeKind.energy,
            VIFCodeUnit.watt_hour,
        ),
        (
            VIF(0b0000_0100),
            1e1,
            VIFCodeKind.energy,
            VIFCodeUnit.watt_hour,
        ),
        (
            VIF(0b0000_0101),
            1e2,
            VIFCodeKind.energy,
            VIFCodeUnit.watt_hour,
        ),
        (
            VIF(0b0000_0110),
            1e3,
            VIFCodeKind.energy,
            VIFCodeUnit.watt_hour,
        ),
        (
            VIF(0b0000_0111),
            1e4,
            VIFCodeKind.energy,
            VIFCodeUnit.watt_hour,
        ),
        # Energy (Joule)  # noqa: ERA001
        (VIF(0b0000_1000), 1e0, VIFCodeKind.energy, VIFCodeUnit.joule),
        (VIF(0b0000_1001), 1e1, VIFCodeKind.energy, VIFCodeUnit.joule),
        (VIF(0b0000_1010), 1e2, VIFCodeKind.energy, VIFCodeUnit.joule),
        (VIF(0b0000_1011), 1e3, VIFCodeKind.energy, VIFCodeUnit.joule),
        (VIF(0b0000_1100), 1e4, VIFCodeKind.energy, VIFCodeUnit.joule),
        (VIF(0b0000_1101), 1e5, VIFCodeKind.energy, VIFCodeUnit.joule),
        (VIF(0b0000_1110), 1e6, VIFCodeKind.energy, VIFCodeUnit.joule),
        (VIF(0b0000_1111), 1e7, VIFCodeKind.energy, VIFCodeUnit.joule),
        # Volume (Meter cubic)
        (
            VIF(0b0001_0000),
            1e-6,
            VIFCodeKind.volume,
            VIFCodeUnit.meter_cubic,
        ),
        (
            VIF(0b0001_0001),
            1e-5,
            VIFCodeKind.volume,
            VIFCodeUnit.meter_cubic,
        ),
        (
            VIF(0b0001_0010),
            1e-4,
            VIFCodeKind.volume,
            VIFCodeUnit.meter_cubic,
        ),
        (
            VIF(0b0001_0011),
            1e-3,
            VIFCodeKind.volume,
            VIFCodeUnit.meter_cubic,
        ),
        (
            VIF(0b0001_0100),
            1e-2,
            VIFCodeKind.volume,
            VIFCodeUnit.meter_cubic,
        ),
        (
            VIF(0b0001_0101),
            1e-1,
            VIFCodeKind.volume,
            VIFCodeUnit.meter_cubic,
        ),
        (
            VIF(0b0001_0110),
            1e0,
            VIFCodeKind.volume,
            VIFCodeUnit.meter_cubic,
        ),
        (
            VIF(0b0001_0111),
            1e1,
            VIFCodeKind.volume,
            VIFCodeUnit.meter_cubic,
        ),
        # Mass (Kilogram)  # noqa: ERA001
        (VIF(0b0001_1000), 1e-3, VIFCodeKind.mass, VIFCodeUnit.kilogram),
        (VIF(0b0001_1001), 1e-2, VIFCodeKind.mass, VIFCodeUnit.kilogram),
        (VIF(0b0001_1010), 1e-1, VIFCodeKind.mass, VIFCodeUnit.kilogram),
        (VIF(0b0001_1011), 1e0, VIFCodeKind.mass, VIFCodeUnit.kilogram),
        (VIF(0b0001_1100), 1e1, VIFCodeKind.mass, VIFCodeUnit.kilogram),
        (VIF(0b0001_1101), 1e2, VIFCodeKind.mass, VIFCodeUnit.kilogram),
        (VIF(0b0001_1110), 1e3, VIFCodeKind.mass, VIFCodeUnit.kilogram),
        (VIF(0b0001_1111), 1e4, VIFCodeKind.mass, VIFCodeUnit.kilogram),
        # On Time (time parts -> days, hours, minutes, seconds)
        (VIF(0b0010_0000), 1, VIFCodeKind.on_time, VIFCodeUnit.second),
        (VIF(0b0010_0001), 60, VIFCodeKind.on_time, VIFCodeUnit.second),
        (
            VIF(0b0010_0010),
            3600,
            VIFCodeKind.on_time,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0010_0011),
            86400,
            VIFCodeKind.on_time,
            VIFCodeUnit.second,
        ),
        # Operating Time (like On Time)
        (
            VIF(0b0010_0100),
            1,
            VIFCodeKind.operating_time,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0010_0101),
            60,
            VIFCodeKind.operating_time,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0010_0110),
            3600,
            VIFCodeKind.operating_time,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0010_0111),
            86400,
            VIFCodeKind.operating_time,
            VIFCodeUnit.second,
        ),
        # Power (Watt)  # noqa: ERA001
        (VIF(0b0010_1000), 1e-3, VIFCodeKind.power, VIFCodeUnit.watt),
        (VIF(0b0010_1001), 1e-2, VIFCodeKind.power, VIFCodeUnit.watt),
        (VIF(0b0010_1010), 1e-1, VIFCodeKind.power, VIFCodeUnit.watt),
        (VIF(0b0010_1011), 1e0, VIFCodeKind.power, VIFCodeUnit.watt),
        (VIF(0b0010_1100), 1e1, VIFCodeKind.power, VIFCodeUnit.watt),
        (VIF(0b0010_1101), 1e2, VIFCodeKind.power, VIFCodeUnit.watt),
        (VIF(0b0010_1110), 1e3, VIFCodeKind.power, VIFCodeUnit.watt),
        (VIF(0b0010_1111), 1e4, VIFCodeKind.power, VIFCodeUnit.watt),
        # Power (Joule/hour)  # noqa: ERA001
        (
            VIF(0b0011_0000),
            1e0,
            VIFCodeKind.power,
            VIFCodeUnit.joule_per_hour,
        ),
        (
            VIF(0b0011_0001),
            1e1,
            VIFCodeKind.power,
            VIFCodeUnit.joule_per_hour,
        ),
        (
            VIF(0b0011_0010),
            1e2,
            VIFCodeKind.power,
            VIFCodeUnit.joule_per_hour,
        ),
        (
            VIF(0b0011_0011),
            1e3,
            VIFCodeKind.power,
            VIFCodeUnit.joule_per_hour,
        ),
        (
            VIF(0b0011_0100),
            1e4,
            VIFCodeKind.power,
            VIFCodeUnit.joule_per_hour,
        ),
        (
            VIF(0b0011_0101),
            1e5,
            VIFCodeKind.power,
            VIFCodeUnit.joule_per_hour,
        ),
        (
            VIF(0b0011_0110),
            1e6,
            VIFCodeKind.power,
            VIFCodeUnit.joule_per_hour,
        ),
        (
            VIF(0b0011_0111),
            1e7,
            VIFCodeKind.power,
            VIFCodeUnit.joule_per_hour,
        ),
        # Volume flow (m^3/hour)
        (
            VIF(0b0011_1000),
            1e-6,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_hour,
        ),
        (
            VIF(0b0011_1001),
            1e-5,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_hour,
        ),
        (
            VIF(0b0011_1010),
            1e-4,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_hour,
        ),
        (
            VIF(0b0011_1011),
            1e-3,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_hour,
        ),
        (
            VIF(0b0011_1100),
            1e-2,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_hour,
        ),
        (
            VIF(0b0011_1101),
            1e-1,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_hour,
        ),
        (
            VIF(0b0011_1110),
            1e0,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_hour,
        ),
        (
            VIF(0b0011_1111),
            1e1,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_hour,
        ),
        # Volume flow (m^3/min)
        (
            VIF(0b0100_0000),
            1e-7,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_minute,
        ),
        (
            VIF(0b0100_0001),
            1e-6,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_minute,
        ),
        (
            VIF(0b0100_0010),
            1e-5,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_minute,
        ),
        (
            VIF(0b0100_0011),
            1e-4,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_minute,
        ),
        (
            VIF(0b0100_0100),
            1e-3,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_minute,
        ),
        (
            VIF(0b0100_0101),
            1e-2,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_minute,
        ),
        (
            VIF(0b0100_0110),
            1e-1,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_minute,
        ),
        (
            VIF(0b0100_0111),
            1e0,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_minute,
        ),
        # Volume flow (m^3/min)
        (
            VIF(0b0100_1000),
            1e-9,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_second,
        ),
        (
            VIF(0b0100_1001),
            1e-8,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_second,
        ),
        (
            VIF(0b0100_1010),
            1e-7,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_second,
        ),
        (
            VIF(0b0100_1011),
            1e-6,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_second,
        ),
        (
            VIF(0b0100_1100),
            1e-5,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_second,
        ),
        (
            VIF(0b0100_1101),
            1e-4,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_second,
        ),
        (
            VIF(0b0100_1110),
            1e-3,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_second,
        ),
        (
            VIF(0b0100_1111),
            1e-2,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.meter_cubic_per_second,
        ),
        # Mass flow (kg/h)
        (
            VIF(0b0101_0000),
            1e-3,
            VIFCodeKind.mass_flow,
            VIFCodeUnit.kilogram_per_hour,
        ),
        (
            VIF(0b0101_0001),
            1e-2,
            VIFCodeKind.mass_flow,
            VIFCodeUnit.kilogram_per_hour,
        ),
        (
            VIF(0b0101_0010),
            1e-1,
            VIFCodeKind.mass_flow,
            VIFCodeUnit.kilogram_per_hour,
        ),
        (
            VIF(0b0101_0011),
            1e0,
            VIFCodeKind.mass_flow,
            VIFCodeUnit.kilogram_per_hour,
        ),
        (
            VIF(0b0101_0100),
            1e1,
            VIFCodeKind.mass_flow,
            VIFCodeUnit.kilogram_per_hour,
        ),
        (
            VIF(0b0101_0101),
            1e2,
            VIFCodeKind.mass_flow,
            VIFCodeUnit.kilogram_per_hour,
        ),
        (
            VIF(0b0101_0110),
            1e3,
            VIFCodeKind.mass_flow,
            VIFCodeUnit.kilogram_per_hour,
        ),
        (
            VIF(0b0101_0111),
            1e4,
            VIFCodeKind.mass_flow,
            VIFCodeUnit.kilogram_per_hour,
        ),
        # Flow Temperature (C)
        (
            VIF(0b0101_1000),
            1e-3,
            VIFCodeKind.flow_temperature,
            VIFCodeUnit.celsius,
        ),
        (
            VIF(0b0101_1001),
            1e-2,
            VIFCodeKind.flow_temperature,
            VIFCodeUnit.celsius,
        ),
        (
            VIF(0b0101_1010),
            1e-1,
            VIFCodeKind.flow_temperature,
            VIFCodeUnit.celsius,
        ),
        (
            VIF(0b0101_1011),
            1e0,
            VIFCodeKind.flow_temperature,
            VIFCodeUnit.celsius,
        ),
        # Return Temperature (C)
        (
            VIF(0b0101_1100),
            1e-3,
            VIFCodeKind.return_temperature,
            VIFCodeUnit.celsius,
        ),
        (
            VIF(0b0101_1101),
            1e-2,
            VIFCodeKind.return_temperature,
            VIFCodeUnit.celsius,
        ),
        (
            VIF(0b0101_1110),
            1e-1,
            VIFCodeKind.return_temperature,
            VIFCodeUnit.celsius,
        ),
        (
            VIF(0b0101_1111),
            1e0,
            VIFCodeKind.return_temperature,
            VIFCodeUnit.celsius,
        ),
        # Temperature Difference (K)
        (
            VIF(0b0110_0000),
            1e-3,
            VIFCodeKind.temperature_difference,
            VIFCodeUnit.kelvin,
        ),
        (
            VIF(0b0110_0001),
            1e-2,
            VIFCodeKind.temperature_difference,
            VIFCodeUnit.kelvin,
        ),
        (
            VIF(0b0110_0010),
            1e-1,
            VIFCodeKind.temperature_difference,
            VIFCodeUnit.kelvin,
        ),
        (
            VIF(0b0110_0011),
            1e-0,
            VIFCodeKind.temperature_difference,
            VIFCodeUnit.kelvin,
        ),
        # External Temperature (C)
        (
            VIF(0b0110_0100),
            1e-3,
            VIFCodeKind.external_temperature,
            VIFCodeUnit.celsius,
        ),
        (
            VIF(0b0110_0101),
            1e-2,
            VIFCodeKind.external_temperature,
            VIFCodeUnit.celsius,
        ),
        (
            VIF(0b0110_0110),
            1e-1,
            VIFCodeKind.external_temperature,
            VIFCodeUnit.celsius,
        ),
        (
            VIF(0b0110_0111),
            1e-0,
            VIFCodeKind.external_temperature,
            VIFCodeUnit.celsius,
        ),
        # Pressure (bar)  # noqa: ERA001
        (VIF(0b0110_1000), 1e-3, VIFCodeKind.pressure, VIFCodeUnit.bar),
        (VIF(0b0110_1001), 1e-2, VIFCodeKind.pressure, VIFCodeUnit.bar),
        (VIF(0b0110_1010), 1e-1, VIFCodeKind.pressure, VIFCodeUnit.bar),
        (VIF(0b0110_1011), 1e0, VIFCodeKind.pressure, VIFCodeUnit.bar),
        # TIme Point
        (VIF(0b0110_1100), 1, VIFCodeKind.time_point, VIFCodeUnit.date),
        (
            VIF(0b0110_1101),
            1,
            VIFCodeKind.time_point,
            VIFCodeUnit.datetime,
        ),
        # H.C.A. = Heat Cost Allocator
        (VIF(0b0110_1110), 1, VIFCodeKind.hca, VIFCodeUnit.hca),
        # Reserved
        (VIF(0b0110_1111), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        # Averaging duration (in seconds)
        (
            VIF(0b0111_0000),
            1,
            VIFCodeKind.averaging_duration,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0111_0001),
            60,
            VIFCodeKind.averaging_duration,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0111_0010),
            3600,
            VIFCodeKind.averaging_duration,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0111_0011),
            86400,
            VIFCodeKind.averaging_duration,
            VIFCodeUnit.second,
        ),
        # Actuality duration (in seconds)
        (
            VIF(0b0111_0100),
            1,
            VIFCodeKind.actuality_duration,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0111_0101),
            60,
            VIFCodeKind.actuality_duration,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0111_0110),
            3600,
            VIFCodeKind.actuality_duration,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0111_0111),
            86400,
            VIFCodeKind.actuality_duration,
            VIFCodeUnit.second,
        ),
        # Fabrication No
        (
            VIF(0b0111_1000),
            1,
            VIFCodeKind.fabrication_no,
            VIFCodeUnit.unknown,
        ),
        # Enhanced
        (VIF(0b0111_1001), 1, VIFCodeKind.enhanced, VIFCodeUnit.unknown),
        # Bus address
        (
            VIF(0b0111_1010),
            1,
            VIFCodeKind.bus_address,
            VIFCodeUnit.unknown,
        ),
        # special purpose
        (VIF(0b0111_1100), 1, VIFCodeKind.user_definable, VIFCodeUnit.unknown),
        (VIF(0b0111_1110), 1, VIFCodeKind.any, VIFCodeUnit.unknown),
        (
            VIF(0b0111_1111),
            1,
            VIFCodeKind.manufacturer_specific,
            VIFCodeUnit.unknown,
        ),
        # extension codes -> explicitly returned
        (VIF(0b1111_1011), 1, VIFCodeKind.extension, VIFCodeUnit.unknown),
        (VIF(0b1111_1101), 1, VIFCodeKind.extension, VIFCodeUnit.unknown),
    ],
)
def test_vif_code_selection(
    vif: VIF, coef: float, kind: VIFCodeKind, unit: VIFCodeUnit
):
    _assert_vif_code(vif=vif, coef=coef, kind=kind, unit=unit)


@pytest.mark.parametrize(
    ("vif", "coef", "kind", "unit"),
    [
        (
            VIF(0b0000_0000),
            1e-1,
            VIFCodeKind.energy,
            VIFCodeUnit.mega_watt_hour,
        ),
        (
            VIF(0b0000_0001),
            1e0,
            VIFCodeKind.energy,
            VIFCodeUnit.mega_watt_hour,
        ),
        (
            VIF(0b0000_0010),
            1e0,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0000_0011),
            1e0,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0000_0100),
            1e0,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0000_0101),
            1e0,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0000_0110),
            1e0,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0000_0111),
            1e0,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (VIF(0b0000_1000), 1e-1, VIFCodeKind.energy, VIFCodeUnit.giga_joule),
        (VIF(0b0000_1001), 1e0, VIFCodeKind.energy, VIFCodeUnit.giga_joule),
        (VIF(0b0000_1010), 1e0, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0000_1011), 1e0, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0000_1100), 1e0, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0000_1101), 1e0, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0000_1110), 1e0, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0000_1111), 1e0, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (
            VIF(0b0001_0000),
            1e2,
            VIFCodeKind.volume,
            VIFCodeUnit.meter_cubic,
        ),
        (
            VIF(0b0001_0001),
            1e3,
            VIFCodeKind.volume,
            VIFCodeUnit.meter_cubic,
        ),
        (VIF(0b0001_0010), 1e0, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0001_0011), 1e0, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0001_0100), 1e0, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0001_0101), 1e0, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0001_0110), 1e0, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0001_0111), 1e0, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (
            VIF(0b0001_1000),
            1e2,
            VIFCodeKind.mass,
            VIFCodeUnit.tonne,
        ),
        (
            VIF(0b0001_1001),
            1e3,
            VIFCodeKind.mass,
            VIFCodeUnit.tonne,
        ),
        (VIF(0b0001_1010), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0001_1011), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0001_1100), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0001_1101), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0001_1110), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0001_1111), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0010_0000), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0010_0001), 1e-1, VIFCodeKind.volume, VIFCodeUnit.feet_cubic),
        (
            VIF(0b0010_0010),
            1e-1,
            VIFCodeKind.volume,
            VIFCodeUnit.american_gallon,
        ),
        (VIF(0b0010_0011), 1, VIFCodeKind.volume, VIFCodeUnit.american_gallon),
        (
            VIF(0b0010_0100),
            0.001,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.american_gallon_per_minute,
        ),
        (
            VIF(0b0010_0101),
            1,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.american_gallon_per_minute,
        ),
        (
            VIF(0b0010_0110),
            1,
            VIFCodeKind.volume_flow,
            VIFCodeUnit.american_gallon_per_hour,
        ),
        (VIF(0b0010_0111), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (
            VIF(0b0010_1000),
            0.1,
            VIFCodeKind.power,
            VIFCodeUnit.mega_watt,
        ),
        (
            VIF(0b0010_1001),
            1,
            VIFCodeKind.power,
            VIFCodeUnit.mega_watt,
        ),
        (VIF(0b0010_1010), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0010_1011), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0010_1100), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0010_1101), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0010_1110), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0010_1111), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (
            VIF(0b0011_0000),
            0.1,
            VIFCodeKind.power,
            VIFCodeUnit.giga_joule_per_hour,
        ),
        (
            VIF(0b0011_0001),
            1,
            VIFCodeKind.power,
            VIFCodeUnit.giga_joule_per_hour,
        ),
        (VIF(0b0011_0010), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0011_0011), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0011_0100), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0011_0101), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0011_0110), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0011_0111), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0011_1000), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0011_1001), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0011_1011), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0011_1100), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0011_1101), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0011_1111), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0100_0000), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0100_0001), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0100_0010), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0100_0011), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0100_0100), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0100_0101), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0100_0110), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0100_0111), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0100_1000), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0100_1001), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0100_1010), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0100_1011), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0100_1100), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0100_1101), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0100_1110), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0100_1111), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0101_0000), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0101_0001), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0101_0010), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0101_0011), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0101_0100), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0101_0101), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0101_0110), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0101_0111), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (
            VIF(0b0101_1000),
            1e-3,
            VIFCodeKind.flow_temperature,
            VIFCodeUnit.fahrenheit,
        ),
        (
            VIF(0b0101_1001),
            1e-2,
            VIFCodeKind.flow_temperature,
            VIFCodeUnit.fahrenheit,
        ),
        (
            VIF(0b0101_1010),
            1e-1,
            VIFCodeKind.flow_temperature,
            VIFCodeUnit.fahrenheit,
        ),
        (
            VIF(0b0101_1011),
            1e0,
            VIFCodeKind.flow_temperature,
            VIFCodeUnit.fahrenheit,
        ),
        (
            VIF(0b0101_1100),
            1e-3,
            VIFCodeKind.return_temperature,
            VIFCodeUnit.fahrenheit,
        ),
        (
            VIF(0b0101_1101),
            1e-2,
            VIFCodeKind.return_temperature,
            VIFCodeUnit.fahrenheit,
        ),
        (
            VIF(0b0101_1110),
            1e-1,
            VIFCodeKind.return_temperature,
            VIFCodeUnit.fahrenheit,
        ),
        (
            VIF(0b0101_1111),
            1e0,
            VIFCodeKind.return_temperature,
            VIFCodeUnit.fahrenheit,
        ),
        (
            VIF(0b0110_0000),
            1e-3,
            VIFCodeKind.temperature_difference,
            VIFCodeUnit.fahrenheit,
        ),
        (
            VIF(0b0110_0001),
            1e-2,
            VIFCodeKind.temperature_difference,
            VIFCodeUnit.fahrenheit,
        ),
        (
            VIF(0b0110_0010),
            1e-1,
            VIFCodeKind.temperature_difference,
            VIFCodeUnit.fahrenheit,
        ),
        (
            VIF(0b0110_0011),
            1e0,
            VIFCodeKind.temperature_difference,
            VIFCodeUnit.fahrenheit,
        ),
        (
            VIF(0b0110_0100),
            1e-3,
            VIFCodeKind.external_temperature,
            VIFCodeUnit.fahrenheit,
        ),
        (
            VIF(0b0110_0101),
            1e-2,
            VIFCodeKind.external_temperature,
            VIFCodeUnit.fahrenheit,
        ),
        (
            VIF(0b0110_0110),
            1e-1,
            VIFCodeKind.external_temperature,
            VIFCodeUnit.fahrenheit,
        ),
        (
            VIF(0b0110_0111),
            1,
            VIFCodeKind.external_temperature,
            VIFCodeUnit.fahrenheit,
        ),
        (VIF(0b0110_1000), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0110_1001), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0110_1010), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0110_1011), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0110_1100), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0110_1101), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0110_1110), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (VIF(0b0110_1111), 1, VIFCodeKind.reserved, VIFCodeUnit.unknown),
        (
            VIF(0b0111_0000),
            1e-3,
            VIFCodeKind.cold_warm_temperature_limit,
            VIFCodeUnit.fahrenheit,
        ),
        (
            VIF(0b0111_0001),
            1e-2,
            VIFCodeKind.cold_warm_temperature_limit,
            VIFCodeUnit.fahrenheit,
        ),
        (
            VIF(0b0111_0010),
            1e-1,
            VIFCodeKind.cold_warm_temperature_limit,
            VIFCodeUnit.fahrenheit,
        ),
        (
            VIF(0b0111_0011),
            1,
            VIFCodeKind.cold_warm_temperature_limit,
            VIFCodeUnit.fahrenheit,
        ),
        (
            VIF(0b0111_0100),
            1e-3,
            VIFCodeKind.cold_warm_temperature_limit,
            VIFCodeUnit.celsius,
        ),
        (
            VIF(0b0111_0101),
            1e-2,
            VIFCodeKind.cold_warm_temperature_limit,
            VIFCodeUnit.celsius,
        ),
        (
            VIF(0b0111_0110),
            1e-1,
            VIFCodeKind.cold_warm_temperature_limit,
            VIFCodeUnit.celsius,
        ),
        (
            VIF(0b0111_0111),
            1,
            VIFCodeKind.cold_warm_temperature_limit,
            VIFCodeUnit.celsius,
        ),
        (
            VIF(0b0111_1000),
            1e-3,
            VIFCodeKind.cumul_count_max_power,
            VIFCodeUnit.watt,
        ),
        (
            VIF(0b0111_1001),
            1e-2,
            VIFCodeKind.cumul_count_max_power,
            VIFCodeUnit.watt,
        ),
        (
            VIF(0b0111_1010),
            1e-1,
            VIFCodeKind.cumul_count_max_power,
            VIFCodeUnit.watt,
        ),
        (
            VIF(0b0111_1011),
            1e0,
            VIFCodeKind.cumul_count_max_power,
            VIFCodeUnit.watt,
        ),
        (
            VIF(0b0111_1100),
            1e1,
            VIFCodeKind.cumul_count_max_power,
            VIFCodeUnit.watt,
        ),
        (
            VIF(0b0111_1101),
            1e2,
            VIFCodeKind.cumul_count_max_power,
            VIFCodeUnit.watt,
        ),
        (
            VIF(0b0111_1110),
            1e3,
            VIFCodeKind.cumul_count_max_power,
            VIFCodeUnit.watt,
        ),
        (
            VIF(0b0111_1111),
            1e4,
            VIFCodeKind.cumul_count_max_power,
            VIFCodeUnit.watt,
        ),
    ],
)
def test_extended_fb_vif_code_selection(
    vif: VIF, coef: float, kind: VIFCodeKind, unit: VIFCodeUnit
):
    _assert_vif_code(
        vif=vif, coef=coef, kind=kind, unit=unit, extension_byte=0xFB
    )


@pytest.mark.parametrize(
    ("vif", "coef", "kind", "unit"),
    [
        (
            VIF(0b0000_0000),
            1e-3,
            VIFCodeKind.currency,
            VIFCodeUnit.currency_credit,
        ),
        (
            VIF(0b0000_0001),
            1e-2,
            VIFCodeKind.currency,
            VIFCodeUnit.currency_credit,
        ),
        (
            VIF(0b0000_0010),
            1e-1,
            VIFCodeKind.currency,
            VIFCodeUnit.currency_credit,
        ),
        (
            VIF(0b0000_0011),
            1,
            VIFCodeKind.currency,
            VIFCodeUnit.currency_credit,
        ),
        (
            VIF(0b0000_0100),
            1e-3,
            VIFCodeKind.currency,
            VIFCodeUnit.currency_debit,
        ),
        (
            VIF(0b0000_0101),
            1e-2,
            VIFCodeKind.currency,
            VIFCodeUnit.currency_debit,
        ),
        (
            VIF(0b0000_0110),
            1e-1,
            VIFCodeKind.currency,
            VIFCodeUnit.currency_debit,
        ),
        (
            VIF(0b0000_0111),
            1,
            VIFCodeKind.currency,
            VIFCodeUnit.currency_debit,
        ),
        (
            VIF(0b0000_1000),
            1,
            VIFCodeKind.access_number,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0000_1001),
            1,
            VIFCodeKind.medium,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0000_1010),
            1,
            VIFCodeKind.manufacturer,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0000_1011),
            1,
            VIFCodeKind.param_set_identification,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0000_1100),
            1,
            VIFCodeKind.model_version,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0000_1101),
            1,
            VIFCodeKind.hardware_version,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0000_1110),
            1,
            VIFCodeKind.firmware_version,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0000_1111),
            1,
            VIFCodeKind.software_version,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0001_0000),
            1,
            VIFCodeKind.customer_location,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0001_0001),
            1,
            VIFCodeKind.customer,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0001_0010),
            1,
            VIFCodeKind.access_code_user,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0001_0011),
            1,
            VIFCodeKind.access_code_operator,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0001_0100),
            1,
            VIFCodeKind.access_code_system_operator,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0001_0101),
            1,
            VIFCodeKind.access_code_developer,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0001_0110),
            1,
            VIFCodeKind.password,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0001_0111),
            1,
            VIFCodeKind.error_flags_binary,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0001_1000),
            1,
            VIFCodeKind.error_mask,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0001_1001),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0001_1010),
            1,
            VIFCodeKind.digital_output_binary,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0001_1011),
            1,
            VIFCodeKind.digital_input_binary,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0001_1100),
            1,
            VIFCodeKind.baudrate,
            VIFCodeUnit.baud,
        ),
        (
            VIF(0b0001_1101),
            1,
            VIFCodeKind.response_delay_time,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0001_1110),
            1,
            VIFCodeKind.retry,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0001_1111),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0010_0000),
            1,
            VIFCodeKind.first_storage,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0010_0001),
            1,
            VIFCodeKind.last_storage,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0010_0010),
            1,
            VIFCodeKind.storage_block_size,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0010_0011),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0010_0100),
            1,
            VIFCodeKind.storage_interval,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0010_0101),
            60,
            VIFCodeKind.storage_interval,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0010_0110),
            3600,
            VIFCodeKind.storage_interval,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0010_0111),
            86400,
            VIFCodeKind.storage_interval,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0010_1000),
            1,
            VIFCodeKind.storage_interval,
            VIFCodeUnit.month,
        ),
        (
            VIF(0b0010_1001),
            1,
            VIFCodeKind.storage_interval,
            VIFCodeUnit.year,
        ),
        (
            VIF(0b0010_1010),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0010_1011),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0010_1100),
            1,
            VIFCodeKind.duration_since_last_readout,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0010_1101),
            60,
            VIFCodeKind.duration_since_last_readout,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0010_1110),
            3600,
            VIFCodeKind.duration_since_last_readout,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0010_1111),
            86400,
            VIFCodeKind.duration_since_last_readout,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0011_0000),
            1,
            VIFCodeKind.tariff_start,
            VIFCodeUnit.datetime,
        ),
        (
            VIF(0b0011_0001),
            60,
            VIFCodeKind.tariff_duration,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0011_0010),
            3600,
            VIFCodeKind.tariff_duration,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0011_0011),
            86400,
            VIFCodeKind.tariff_duration,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0011_0100),
            1,
            VIFCodeKind.tariff_period,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0011_0101),
            60,
            VIFCodeKind.tariff_period,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0011_0110),
            3600,
            VIFCodeKind.tariff_period,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0011_0111),
            86400,
            VIFCodeKind.tariff_period,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0011_1000),
            1,
            VIFCodeKind.tariff_period,
            VIFCodeUnit.month,
        ),
        (
            VIF(0b0011_1001),
            1,
            VIFCodeKind.tariff_period,
            VIFCodeUnit.year,
        ),
        (
            VIF(0b0011_1010),
            1,
            VIFCodeKind.no_vif,
            VIFCodeUnit.dimensionless,
        ),
        (
            VIF(0b0011_1011),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0011_1100),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0011_1101),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0011_1110),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0011_1111),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0100_0000),
            1e-9,
            VIFCodeKind.voltage,
            VIFCodeUnit.volt,
        ),
        (
            VIF(0b0100_0001),
            1e-8,
            VIFCodeKind.voltage,
            VIFCodeUnit.volt,
        ),
        (
            VIF(0b0100_0010),
            1e-7,
            VIFCodeKind.voltage,
            VIFCodeUnit.volt,
        ),
        (
            VIF(0b0100_0011),
            1e-6,
            VIFCodeKind.voltage,
            VIFCodeUnit.volt,
        ),
        (
            VIF(0b0100_0100),
            1e-5,
            VIFCodeKind.voltage,
            VIFCodeUnit.volt,
        ),
        (
            VIF(0b0100_0101),
            1e-4,
            VIFCodeKind.voltage,
            VIFCodeUnit.volt,
        ),
        (
            VIF(0b0100_0110),
            1e-3,
            VIFCodeKind.voltage,
            VIFCodeUnit.volt,
        ),
        (
            VIF(0b0100_0111),
            1e-2,
            VIFCodeKind.voltage,
            VIFCodeUnit.volt,
        ),
        (
            VIF(0b0100_1000),
            1e-1,
            VIFCodeKind.voltage,
            VIFCodeUnit.volt,
        ),
        (
            VIF(0b0100_1001),
            1e0,
            VIFCodeKind.voltage,
            VIFCodeUnit.volt,
        ),
        (
            VIF(0b0100_1010),
            1e1,
            VIFCodeKind.voltage,
            VIFCodeUnit.volt,
        ),
        (
            VIF(0b0100_1011),
            1e2,
            VIFCodeKind.voltage,
            VIFCodeUnit.volt,
        ),
        (
            VIF(0b0100_1100),
            1e3,
            VIFCodeKind.voltage,
            VIFCodeUnit.volt,
        ),
        (
            VIF(0b0100_1101),
            1e4,
            VIFCodeKind.voltage,
            VIFCodeUnit.volt,
        ),
        (
            VIF(0b0100_1110),
            1e5,
            VIFCodeKind.voltage,
            VIFCodeUnit.volt,
        ),
        (
            VIF(0b0100_1111),
            1e6,
            VIFCodeKind.voltage,
            VIFCodeUnit.volt,
        ),
        (
            VIF(0b0101_0000),
            1e-12,
            VIFCodeKind.current,
            VIFCodeUnit.amper,
        ),
        (
            VIF(0b0101_0001),
            1e-11,
            VIFCodeKind.current,
            VIFCodeUnit.amper,
        ),
        (
            VIF(0b0101_0010),
            1e-10,
            VIFCodeKind.current,
            VIFCodeUnit.amper,
        ),
        (
            VIF(0b0101_0011),
            1e-9,
            VIFCodeKind.current,
            VIFCodeUnit.amper,
        ),
        (
            VIF(0b0101_0100),
            1e-8,
            VIFCodeKind.current,
            VIFCodeUnit.amper,
        ),
        (
            VIF(0b0101_0101),
            1e-7,
            VIFCodeKind.current,
            VIFCodeUnit.amper,
        ),
        (
            VIF(0b0101_0110),
            1e-6,
            VIFCodeKind.current,
            VIFCodeUnit.amper,
        ),
        (
            VIF(0b0101_0111),
            1e-5,
            VIFCodeKind.current,
            VIFCodeUnit.amper,
        ),
        (
            VIF(0b0101_1000),
            1e-4,
            VIFCodeKind.current,
            VIFCodeUnit.amper,
        ),
        (
            VIF(0b0101_1001),
            1e-3,
            VIFCodeKind.current,
            VIFCodeUnit.amper,
        ),
        (
            VIF(0b0101_1010),
            1e-2,
            VIFCodeKind.current,
            VIFCodeUnit.amper,
        ),
        (
            VIF(0b0101_1011),
            1e-1,
            VIFCodeKind.current,
            VIFCodeUnit.amper,
        ),
        (
            VIF(0b0101_1100),
            1e0,
            VIFCodeKind.current,
            VIFCodeUnit.amper,
        ),
        (
            VIF(0b0101_1101),
            1e1,
            VIFCodeKind.current,
            VIFCodeUnit.amper,
        ),
        (
            VIF(0b0101_1110),
            1e2,
            VIFCodeKind.current,
            VIFCodeUnit.amper,
        ),
        (
            VIF(0b0101_1111),
            1e3,
            VIFCodeKind.current,
            VIFCodeUnit.amper,
        ),
        (
            VIF(0b0110_0000),
            1,
            VIFCodeKind.reset_counter,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0110_0001),
            1,
            VIFCodeKind.cumul_counter,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0110_0010),
            1,
            VIFCodeKind.control_signal,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0110_0011),
            1,
            VIFCodeKind.week_day,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0110_0100),
            1,
            VIFCodeKind.week_number,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0110_0101),
            1,
            VIFCodeKind.day_change_timepoint,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0110_0110),
            1,
            VIFCodeKind.param_activation_state,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0110_0111),
            1,
            VIFCodeKind.special_supplier_info,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0110_1000),
            3600,
            VIFCodeKind.duration_since_last_cumulation,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0110_1001),
            86400,
            VIFCodeKind.duration_since_last_cumulation,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0110_1010),
            1,
            VIFCodeKind.duration_since_last_cumulation,
            VIFCodeUnit.month,
        ),
        (
            VIF(0b0110_1011),
            1,
            VIFCodeKind.duration_since_last_cumulation,
            VIFCodeUnit.year,
        ),
        (
            VIF(0b0110_1100),
            3600,
            VIFCodeKind.operating_time_battery,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0110_1101),
            86400,
            VIFCodeKind.operating_time_battery,
            VIFCodeUnit.second,
        ),
        (
            VIF(0b0110_1110),
            1,
            VIFCodeKind.operating_time_battery,
            VIFCodeUnit.month,
        ),
        (
            VIF(0b0110_1111),
            1,
            VIFCodeKind.operating_time_battery,
            VIFCodeUnit.year,
        ),
        (
            VIF(0b0111_0000),
            1,
            VIFCodeKind.battery_change_datetime,
            VIFCodeUnit.datetime,
        ),
        (
            VIF(0b0111_0001),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0111_0010),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0111_0011),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0111_0100),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0111_0101),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0111_0110),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0111_0111),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0111_1000),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0111_1001),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0111_1010),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0111_1011),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0111_1100),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0111_1101),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0111_1110),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
        (
            VIF(0b0111_1111),
            1,
            VIFCodeKind.reserved,
            VIFCodeUnit.unknown,
        ),
    ],
)
def test_extended_fd_vif_code_selection(
    vif: VIF, coef: float, kind: VIFCodeKind, unit: VIFCodeUnit
):
    _assert_vif_code(
        vif=vif, coef=coef, kind=kind, unit=unit, extension_byte=0xFD
    )
